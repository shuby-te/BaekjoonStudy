#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int BFS(vector<vector<int>> graph, int v);

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	int v, e;
	cin >> v >> e;

	vector<vector<int>> graph(v);

	for (int i = 0; i < e; i++)
	{
		int a, b;
		cin >> a >> b;		
		graph[a - 1].push_back(b - 1);
		graph[b - 1].push_back(a - 1);
	}

	cout << BFS(graph, 0);
}

int BFS(vector<vector<int>> graph, int v)
{
	int* isSearched = new int[graph.size()] {0, };
	queue<int> que;
	int count = 0;

	que.push(v);
	isSearched[v] = 1;

	while (!que.empty())
	{
		int now = que.front();
		que.pop();

		for (int i = 0; i < graph[now].size(); i++)
		{
			if (isSearched[graph[now][i]] == 0)
			{
				isSearched[graph[now][i]] = 1;
				que.push(graph[now][i]);
				count++;
			}
		}
	}
	return count;
}
