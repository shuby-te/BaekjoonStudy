#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

int BFS(string* arr, int size, int a, int b);

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	int n;
	cin >> n;

	string* arr = new string[n];

	for (int i = 0; i < n; i++)
		cin >> arr[i];

	vector<int> v;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[i][j] == '1')
				v.push_back(BFS(arr, n, i, j));
		}
	}

	sort(v.begin(), v.end());

	cout << v.size() << '\n';
	for (auto elt : v)
	{
		cout << elt << '\n';
	}
}

int BFS(string* arr, int size, int a, int b)
{
	int pa = a, pb = b;
	int count = 0;

	queue<pair<int, int>> que;

	que.push(make_pair(pa, pb));
	arr[pa][pb] = '2';
	count++;

	while (!que.empty())
	{
		pa = que.front().first;
		pb = que.front().second;
		que.pop();

		for (int i = 0; i < 4; i++) 
		{
			int ta = pa, tb = pb;
			if (i % 2 == 0) ta += (1 - i);
			else tb += (i - 2);

			if (ta < 0 || ta > size - 1 || tb < 0 || tb > size - 1
				|| arr[ta][tb] == '0' || arr[ta][tb] == '2')
				continue;
			else if (arr[ta][tb] == '1')
			{
				que.push(make_pair(ta, tb));
				arr[ta][tb] = '2';
				count++;
			}
		}
	}

	//cout << "asdf";

	
	return count;
}
